"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _socket = _interopRequireDefault(require("socket.io-client"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// 半角なら１文字、全角なら２文字としてカウント
var Mylib = /*#__PURE__*/function () {
  function Mylib() {
    _classCallCheck(this, Mylib);
  }

  _createClass(Mylib, null, [{
    key: "charCount",
    value: function charCount(str) {
      var count = 0;

      for (var i = 0; i < str.length; i++) {
        if (str[i].match(/^[\u30a0-\u30ff\u3040-\u309f\u3005-\u3006\u30e0-\u9fcf]+$/)) {
          count += 2;
        } else {
          count += 1;
        }
      }

      return count;
    } // 区切り文字を残してsplitする

  }, {
    key: "split",
    value: function split(str, _char) {
      var result = [];
      var temp = "";

      for (var i = 0; i < str.length; i++) {
        temp += str[i];

        if (str[i] === _char) {
          result.push(temp);
          temp = "";
        }
      }

      if (temp) result.push(temp);
      return result;
    } // s ~ tまでの整数をランダム生成

  }, {
    key: "rand",
    value: function rand(s, t) {
      return s + Math.floor(Math.random() * t);
    }
  }, {
    key: "generateID",
    value: function generateID(usedID) {
      var result;
      {
        result = Mylib.rand(0, Number.MAX_SAFE_INTEGER);
      }

      while (usedID[result]) {
        ;
      }

      usedID[result] = true;
      return result;
    }
  }]);

  return Mylib;
}();

var Chat = /*#__PURE__*/function (_React$Component) {
  _inherits(Chat, _React$Component);

  var _super = _createSuper(Chat);

  function Chat() {
    var _this;

    _classCallCheck(this, Chat);

    _this = _super.call(this);
    _this.socket = (0, _socket["default"])("localhost:5000"); // this.socket = io("https://tetris-panda.herokuapp.com/");

    _this.usedCommentID = {};
    _this.state = {
      comments: [],
      input: {
        value: [""],
        row: 1
      },
      isActive: false,
      user: null
    };
    _this.createUser = _this.createUser.bind(_assertThisInitialized(_this));
    _this.updateInput = _this.updateInput.bind(_assertThisInitialized(_this));
    _this.addComment = _this.addComment.bind(_assertThisInitialized(_this));
    _this.enterPost = _this.enterPost.bind(_assertThisInitialized(_this));
    _this.handleClickWindow = _this.handleClickWindow.bind(_assertThisInitialized(_this)); // refs

    _this.textarea = /*#__PURE__*/_react["default"].createRef();
    _this.commentsBottom = /*#__PURE__*/_react["default"].createRef();
    return _this;
  }

  _createClass(Chat, [{
    key: "createUser",
    value: function createUser(name, img, pattern) {
      var _this2 = this;

      if (this.state.user) return;
      var id;
      this.socket.emit("createUserRequest");
      this.socket.on("createUserResponse", function (data) {
        id = data.users[data.id].id;

        _this2.setState({
          user: {
            id: id,
            img: img,
            name: name,
            pattern: pattern
          }
        });
      });
    } // 空白だけとかのコメントは送れらん

  }, {
    key: "enterPost",
    value: // ctrl+Enterでコメントを送信できる
    function enterPost(e) {
      if (e.key === "Enter" && (e.crtlKey || e.metaKey)) {
        this.addComment(e);
      }
    } // "addCommentRequest"イベントで渡す関数

  }, {
    key: "refrectComment",
    value: function refrectComment(data) {
      var value = data.value;
      var id = Mylib.generateID(this.usedCommentID);
      var userParams = data.user;

      var user = /*#__PURE__*/_react["default"].createElement(User, {
        id: userParams.id,
        img: userParams.img,
        name: userParams.name,
        pattern: userParams.pattern
      });

      var comment = Chat.generateComment(value, id, user);
      var comments = this.state.comments;
      comments.push(comment);
      this.setState({
        comments: comments
      }); // 自動で下までスクロール

      if (this.state.isActive) this.commentsBottom.current.scrollIntoView();
    } // コメント追加

  }, {
    key: "addComment",
    value: function addComment(e) {
      e.preventDefault();
      var value = this.state.input.value;
      if (!Chat.validation(value)) return;
      this.socket.emit("addCommentRequest", {
        value: value,
        user: this.state.user
      });
      this.setState({
        input: {
          value: [""],
          row: 1
        }
      });
    } // textareaの値を更新する（スパゲティ)

  }, {
    key: "updateInput",
    value: function updateInput(e) {
      var _2;

      var value = Mylib.split(e.target.value, "\n");
      value[_2 = 0] || (value[_2] = "");
      var v_len = value.length;
      var target = value[v_len - 1];
      var t_len = target.length;
      var isAdded = e.target.value.length > this.state.input.value.join("").length;

      if (Mylib.charCount(target) > 30) {
        var temp = target[t_len - 1];
        if (temp === "\n") temp = "";
        value[v_len - 1] = value[v_len - 1].slice(0, -1) + "\n";
        value.push(temp);
      }

      var row = v_len;

      if (row > 3 || isAdded && row === 3 && value[2].slice(-1) === "\n") {
        console.log("return");
        return;
      }

      if (value[row - 1].slice(-1) === "\n") {
        if (isAdded) {
          row++;
        } else {
          value.pop();
          row--;
        }
      }

      this.setState({
        input: {
          value: value,
          row: row
        }
      });
    }
  }, {
    key: "activateInput",
    value: function activateInput() {
      var flag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.setState({
        isActive: flag
      });
    }
  }, {
    key: "handleClickWindow",
    value: function handleClickWindow(e) {
      var target = e.target;

      if (this.state.user && (target.className === "input-container" || target.parentNode.className === "input")) {
        this.activateInput();
        this.textarea.current.focus();
      } else {
        this.activateInput(false);
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this3 = this;

      this.createUser("panda", "../assets/img/chat/user/user4.png", 1);
      this.socket.on("addCommentResponse", function (data) {
        _this3.refrectComment(data);
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react["default"].createElement("div", {
        id: "chat",
        onClick: this.handleClickWindow
      }, /*#__PURE__*/_react["default"].createElement(UserSelect, {
        user: this.state.user,
        createUser: this.createUser
      }), /*#__PURE__*/_react["default"].createElement("div", {
        id: "chat-space",
        style: {
          pointerEvents: this.state.user ? "all" : "none"
        }
      }, " ", /*#__PURE__*/_react["default"].createElement("div", {
        id: "comments-container"
      }, /*#__PURE__*/_react["default"].createElement("ul", null, this.state.comments), /*#__PURE__*/_react["default"].createElement("div", {
        ref: this.commentsBottom,
        id: "comments-bottom"
      })), /*#__PURE__*/_react["default"].createElement(Input, {
        params: this.state.input,
        textarea: this.textarea,
        isActive: this.state.isActive,
        handleChange: this.updateInput,
        handleClick: this.addComment,
        handleKeyDown: this.enterPost,
        buttonValue: "\u9001\u4FE1"
      }), this.state.user ? null : /*#__PURE__*/_react["default"].createElement("div", {
        id: "chat-mask"
      }), " "));
    }
  }], [{
    key: "validation",
    value: function validation(value) {
      var str = value.join("");
      var judge = str.length > 0 && str.match(/[^ 　\n\t]/);
      return judge;
    }
  }, {
    key: "generateComment",
    value: function generateComment(value, id, user) {
      var img = "url(../assets/img/chat/cloud/cloud".concat(Mylib.rand(0, 5), ".png)"); // コメントのサイズを決める

      var width = 0;
      var height;
      value.forEach(function (str) {
        width = Math.max(width, Mylib.charCount(str));
      });
      width *= 20;
      width = Math.max(width, 120);
      width = Math.min(width, 380);
      height = width * (100 / 280) * (value.length / 3) * 1.5;
      height = Math.max(height, 100); //

      var marginLeft = "".concat(Mylib.rand(-60, 200), "px");
      var style = {
        width: "".concat(width, "px"),
        height: "".concat(height, "px"),
        marginLeft: marginLeft,
        backgroundSize: "".concat(width, "px ").concat(height, "px"),
        backgroundImage: img
      };
      return /*#__PURE__*/_react["default"].createElement(Comment, {
        key: id,
        value: value,
        style: style,
        user: user
      });
    }
  }]);

  return Chat;
}(_react["default"].Component);

function Comment(props) {
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "comment",
    style: props.style
  }, /*#__PURE__*/_react["default"].createElement("li", null, props.value.map(function (line, i) {
    return /*#__PURE__*/_react["default"].createElement("p", {
      key: i
    }, line);
  })), props.user);
}

function Input(props) {
  var className = "input-container";
  if (props.isActive) className += " active";
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: className
  }, /*#__PURE__*/_react["default"].createElement("form", {
    className: "input",
    onKeyDown: props.handleKeyDown
  }, /*#__PURE__*/_react["default"].createElement("textarea", {
    value: props.params.value.join(""),
    ref: props.textarea,
    rows: props.params.row,
    wrap: "hard",
    onChange: props.handleChange
  }), /*#__PURE__*/_react["default"].createElement("input", {
    type: "submit",
    value: props.buttonValue,
    title: "ctrl+Enter",
    onClick: props.handleClick
  })));
}

function User(props) {
  var style = props.pattern ? {
    left: 0
  } : {
    right: 0
  };
  return /*#__PURE__*/_react["default"].createElement("img", {
    src: props.img,
    title: props.name,
    style: style
  });
}

function NameSelect(props) {
  return /*#__PURE__*/_react["default"].createElement("div", {
    id: "name-select"
  }, /*#__PURE__*/_react["default"].createElement("img", {
    src: props.img,
    alt: "user-image"
  }), /*#__PURE__*/_react["default"].createElement(Input, {
    params: props.params,
    textarea: props.textarea,
    isActive: props.isActive,
    buttonValue: "\u6C7A\u5B9A",
    handleChange: props.handleChange,
    handleClick: props.handleClick,
    handleKeyDown: props.handleKeyDown
  }));
}

function Image(props) {
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "image-container",
    onClick: function onClick() {
      return props.handleClick(props.id);
    }
  }, /*#__PURE__*/_react["default"].createElement("img", {
    src: props.images[props.id]
  }));
}

function ImageSelect(props) {
  var images = props.images.map(function (_, i) {
    return /*#__PURE__*/_react["default"].createElement(Image, {
      key: i,
      id: i,
      images: props.images,
      handleClick: props.handleClick
    });
  });
  return /*#__PURE__*/_react["default"].createElement("div", {
    id: "image-select"
  }, images);
}

var UserSelect = /*#__PURE__*/function (_React$Component2) {
  _inherits(UserSelect, _React$Component2);

  var _super2 = _createSuper(UserSelect);

  function UserSelect(props) {
    var _this4;

    _classCallCheck(this, UserSelect);

    _this4 = _super2.call(this, props);
    _this4.state = {
      mode: 0,
      guide: "キャラクターをえらんでね!",
      img: null,
      pattern: null,
      nameInput: {
        value: [""],
        row: 1
      },
      isActive: false
    };
    _this4.images = Array.from(Array(15), function (_, i) {
      return "../assets/img/chat/user/user".concat(i, ".png");
    });
    _this4.handleNameSelect = _this4.handleNameSelect.bind(_assertThisInitialized(_this4));
    _this4.handleImageSelect = _this4.handleImageSelect.bind(_assertThisInitialized(_this4));
    _this4.handleNameChange = _this4.handleNameChange.bind(_assertThisInitialized(_this4));
    _this4.enterPost = _this4.enterPost.bind(_assertThisInitialized(_this4));
    _this4.handleClickWindow = _this4.handleClickWindow.bind(_assertThisInitialized(_this4)); // refs

    _this4.textarea = /*#__PURE__*/_react["default"].createRef();
    return _this4;
  } // ctrl+Enterでコメントを送信できる


  _createClass(UserSelect, [{
    key: "enterPost",
    value: function enterPost(e) {
      if (e.key === "Enter" && (e.crtlKey || e.metaKey)) {
        this.handleNameSelect(e);
      }
    }
  }, {
    key: "nameAlert",
    value: function nameAlert() {
      alert("12文字以内で頼む。");
    }
  }, {
    key: "handleNameChange",
    value: function handleNameChange(e) {
      var value = e.target.value;
      if (value.slice(-1) === "\n") return;

      if (value.length > 12) {
        this.nameAlert();
        return;
      }

      this.setState({
        nameInput: {
          value: [value],
          row: 1
        }
      });
    }
  }, {
    key: "handleImageSelect",
    value: function handleImageSelect(id) {
      var img = this.images[id];
      var pattern = id > 7;
      this.setState({
        img: img,
        pattern: pattern,
        mode: 1,
        guide: "なまえをきめてね!!"
      });
    }
  }, {
    key: "handleNameSelect",
    value: function handleNameSelect(e) {
      e.preventDefault();
      var value = this.state.nameInput.value; // バリデーション

      if (!Chat.validation(value)) return;
      this.props.createUser(value[0], this.state.img, this.state.pattern);
    }
  }, {
    key: "activateInput",
    value: function activateInput() {
      var flag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.setState({
        isActive: flag
      });
    }
  }, {
    key: "handleClickWindow",
    value: function handleClickWindow(e) {
      var target = e.target;

      if (target.className === "input-container" || target.parentNode.className === "input") {
        this.activateInput();
        this.textarea.current.focus();
      } else {
        this.activateInput(false);
      }
    }
  }, {
    key: "render",
    value: function render() {
      if (this.props.user) return null;
      var select;

      switch (this.state.mode) {
        case 0:
          select = /*#__PURE__*/_react["default"].createElement(ImageSelect, {
            images: this.images,
            handleClick: this.handleImageSelect
          });
          break;

        case 1:
          select = /*#__PURE__*/_react["default"].createElement(NameSelect, {
            img: this.state.img,
            params: this.state.nameInput,
            textarea: this.textarea,
            isActive: this.state.isActive,
            handleChange: this.handleNameChange,
            handleClick: this.handleNameSelect,
            handleKeyDown: this.enterPost
          });
          break;
      }

      return /*#__PURE__*/_react["default"].createElement("div", {
        id: "user-select",
        onClick: this.handleClickWindow
      }, /*#__PURE__*/_react["default"].createElement("h1", null, this.state.guide), select);
    }
  }], [{
    key: "validation",
    value: function validation(value) {
      var str = value.join("");
      var judge = str.length > 0 && str.match(/[^ 　\n\t]/);
      return judge;
    }
  }]);

  return UserSelect;
}(_react["default"].Component);

_reactDom["default"].render( /*#__PURE__*/_react["default"].createElement(_react["default"].StrictMode, null, /*#__PURE__*/_react["default"].createElement(Chat, null)), document.getElementById('root')); // console.log("hello");